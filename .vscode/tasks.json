{
	"version": "2.0.0",
	"tasks": [
		{
			"label": "go vet",
			"type": "shell",
			"command": "go vet ./...",
			"group": "build",
			"problemMatcher": [
				"$go"
			],
			"presentation": {
				"reveal": "always"
			}
		},
		{
			"label": "go fmt (check)",
			"type": "shell",
			"command": "powershell -NoProfile -ExecutionPolicy Bypass -Command \"$files = go list -f '{{.Dir}}' ./...; $bad = @(); foreach ($d in $files) { Get-ChildItem $d -Filter *.go | ForEach-Object { $c = (Get-Content $_.FullName -Raw); if ($c -match '\t') { } }; }; gofmt -l . | Where-Object { $_ }\"",
			"problemMatcher": [],
			"presentation": {
				"reveal": "never"
			}
		},
		{
			"label": "golangci-lint",
			"type": "shell",
			"command": "golangci-lint run ./...",
			"problemMatcher": [
				"$go"
			],
			"presentation": {
				"reveal": "always"
			}
		},
		{
			"label": "lint-all",
			"type": "shell",
			"command": "go vet ./...; golangci-lint run ./...",
			"problemMatcher": [
				"$go"
			],
			"presentation": {
				"reveal": "always"
			}
		},
		{
			"label": "go vet",
			"type": "shell",
			"command": "go",
			"args": [
				"vet",
				"./..."
			],
			"problemMatcher": [
				"$go"
			],
			"group": "build"
		},
		{
			"label": "go vet ./...",
			"type": "shell",
			"command": "go vet ./...",
			"problemMatcher": [
				"$go"
			],
			"group": "build"
		},
		{
			"label": "go test",
			"type": "shell",
			"command": "go",
			"args": [
				"test",
				"./..."
			],
			"problemMatcher": [
				"$go"
			],
			"group": "build"
		}
	]
}